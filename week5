-- iterate f x returns an infinite list of repeated applications of f to x:
-- iterate f x == [x, f x, f (f x), ...]

--{-# NOINLINE [1] iterate #-}
--iterate :: (a -> a) -> a -> [a]
--iterate f x =  x : iterate f (f x)

-- my iterate, recursive

myIterate :: (a -> a) -> a -> [a]
myIterate f a = a : myIterate f (f a)

-- | 'iterate\'' is the strict version of 'iterate'.
--
-- It ensures that the result of each application of force to weak head normal
-- form before proceeding.
--{-# NOINLINE [1] iterate' #-}
iterate' :: (a -> a) -> a -> [a]
iterate' f x =
    let x' = f x
    in x' `seq` (x : iterate' f x')

--takeWhile, applied to a predicate p and a list xs, returns the longest 
-- prefix (possibly empty) of xs of elements that satisfy p:
myTakeWhile :: (a -> Bool) -> [a] -> [a]
myTakeWhile _ [] = [] -- base case
myTakeWhile p (x:xs) -- take while p is true
            | p x = x : takeWhile p xs
            | otherwise =  []

-- Pascal's triangle

pascal :: Integer -> [Integer]
pascal 0 = [1]
pascal n = zipWith (+) ([0] ++ pascal (n-1)) (pascal (n-1) ++ [0])

-- used this function from class for inspiration:
 
--addPairwise :: Num a => [a] -> [a] -> [a]
--addPairwise xs ys = map (uncurry (+)) (zip xs ys)

pascal' :: Integer -> [Integer]
pascal' 0 = [1]
pascal' n = [1] ++ map (uncurry (+)) (zip prev (tail prev)) ++ [1]
 where
 	prev = pascal'(n-1)

-- pointfree definiton of add pair
addPair :: Num a => (a, a) -> a
addPair = uncurry (+)

-- point free function that partially applies filter
withoutZeros :: (Eq a, Num a) => [a] -> [a]
withoutZeros = filter (/=0)


-- naive definition
-- info found on: https://wiki.haskell.org/The_Fibonacci_sequence 
fib :: Integer -> Integer
fib 0 = 0
fib 1 = 1
fib n = fib (n-1) + fib (n-2)

fibs = map fib [0..]
--fibs = 0 : 1 : zipWith (+) fibs (tail fibs)

things :: [Integer]
things = 0 : 1 : zipWith (+) things (tail things)
